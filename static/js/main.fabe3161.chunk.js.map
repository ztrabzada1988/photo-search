{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","style","backgroundColor","ImageResults","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","paddingLeft","paddingRight","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","width","Component","Search","searchText","amount","apiUrl","apiKey","process","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fabe3161.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from 'material-ui/AppBar';\n\nconst NavBar = () => <AppBar title=\"PixaBay Photo Finder\"  style={{ backgroundColor: '#ff584b' }} />\n\nexport default NavBar;","import React, { Component } from 'react'\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nclass ImageResults extends Component {\n    state = {\n        open: false, // this is from Material UI Dialog documentation\n        currentImg: '' \n    }\n\n    handleOpen = img => {\n        this.setState({ open: true, currentImg: img });\n    }\n\n    handleClose = () => {\n        this.setState({ open: false });\n    }\n\n  render() {\n    let imageListContent;\n    // const images = this.props.images;\n    const { images } = this.props; // same as above\n\n    if(images) { // if images coming from Search is not empty\n      imageListContent = (\n        <GridList cols={3} style={{ paddingLeft: '5px', paddingRight: '5px' }}>\n          {images.map(img => (\n            <GridTile \n                title={img.tags} // tags is from api result \n                key={img.id}\n                subtitle={ // like an image description \n                  <span>\n                    by <strong>{img.user}</strong>\n                  </span>\n                }\n                actionIcon={\n                  <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\n                    <ZoomIn color=\"white\" />\n                  </IconButton>\n                }\n            >\n\n              <img src={img.largeImageURL} alt=\"\"/>\n            </GridTile>\n          ))}\n        </GridList>\n      )\n    } else {\n        imageListContent = null;\n    }\n\n    const actions = [\n        <FlatButton label=\"Close\" primary={true} onClick={this.handleClose} />\n    ]\n\n    return (\n      <div>\n        {imageListContent}\n        <Dialog \n          actions={actions}\n          modal={false}\n          open={this.state.open}\n          onRequestClose={this.handleClose}\n        >\n          <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} /> \n        </Dialog>\n      </div>\n    )\n  }\n}\n\nexport default ImageResults;","import React, { Component } from 'react';\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\n\nimport ImageResults from '../image-results/ImageResults';\n\nclass Search extends Component {\n    state = {\n        searchText: '',\n        amount: 15,\n        apiUrl: 'https://pixabay.com/api',\n        apiKey:  process.env.REACT_APP_PIXABAY_API_KEY,\n        images: []\n    };\n\n    //names and values correspond to TextField below\n    onTextChange = (e) => {\n        const val = e.target.value;\n        this.setState({[e.target.name]: val}, () => {  // see TextField name below\n            if (val === '') {\n                this.setState({images: []});\n            } else {\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&\n                image_type=photo&per_page=${this.state.amount}&safesearch=true`) // see pixabay API documentation for API call terms \n                    .then(res => this.setState({images: res.data.hits})) // the response data is on \"hits\" object in the API response (see API docu)\n                    .catch(err => console.log(err));\n            }\n        });\n    };\n\n    // this corresponds to the SelectField below\n    onAmountChange = (e, index, value) => this.setState({amount: value});\n\n  render() {\n    // console.log(this.state.images);\n    return (\n      <div>\n        <TextField style={{ paddingLeft: '20px' }}\n          name=\"searchText\" // name here needs to match the initial state name up top\n          value={this.state.searchText}\n          onChange={this.onTextChange}\n          floatingLabelText=\"Search For Images\"\n          fullWidth={true}\n        />\n        <br/>\n\n        <SelectField style={{ paddingLeft: '20px' }}\n          name=\"amount\"\n          floatingLabelText=\"Amount\"\n          value={this.state.amount}\n          onChange={this.onAmountChange}\n        >\n          <MenuItem value={5} primaryText=\"5\" />\n          <MenuItem value={10} primaryText=\"10\" />\n          <MenuItem value={15} primaryText=\"15\" />\n          <MenuItem value={30} primaryText=\"30\" />\n          <MenuItem value={50} primaryText=\"50\" />\n        </SelectField>\n        <br/>\n        {/* if the length of the images array is greater than 0, then show the ImageResultsComponent with images prop passed, else null */}\n        {this.state.images.length > 0 ? (<ImageResults images={this.state.images}/>) : null}\n\n      </div>\n    )\n  }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nimport './App.css';\n\nimport NavBar from './components/navbar/NavBar';\nimport Search from './components/search/Search';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n          <NavBar />\n          <Search />\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}